name: CI

on:
  pull_request:
    branches:
      - main
      - release/*

jobs:
  registry-validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Rules
        uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: Build registry artifact tool
        working-directory: build/registry
        run: go build -o rules-registry ./...
      
      - name: Test registry artifact tool
        working-directory: build/registry
        run: go test ./... -cover

      - name: Check Registry validity
        run: build/registry/rules-registry check registry.yaml

  # retrieves the changed rules files and the Falco versions to be used
  rules-get-values:
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.set-changed-files.outputs.changed-files }}
      falco-versions: ${{ steps.set-falco-versions.outputs.versions }}
    steps:
      - name: Checkout rules
        uses: actions/checkout@v3

      - name: Get changed files
        uses: jitterbit/get-changed-files@v1
        id: changed-files
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find changed rules files
        id: set-changed-files
        run: |
          values=""
          for changed_file in ${{ steps.changed-files.outputs.all }}; do
            if [[ ${changed_file} =~ ^rules/.* ]]; then
              values="${values}${changed_file}"
            fi
          done
          echo "changed-files=$(echo "${values}" | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Read Falco versions
        id: set-falco-versions
        run: |
          values=""
          while read -r line
          do
            values="${values}${line}"$'\n'
          done < "./.github/FALCO_VERSION"
          echo "versions=$(echo "${values}" | jq -R -s -c 'split("\n")[:-2]')" >> $GITHUB_OUTPUT

  rules-validate:
    needs: rules-get-values
    strategy:
      fail-fast: false
      matrix:
        rules-file: ${{ fromJson(needs.rules-get-values.outputs.changed-files) }}
        falco-version: ${{ fromJson(needs.rules-get-values.outputs.falco-versions) }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: Checkout rules
        uses: actions/checkout@v3

      - name: Build checker tool
        working-directory: build/checker
        run: go build -o rules-check
      
      - name: Test checker tool
        working-directory: build/checker
        run: go test ./... -cover

      - name: Validate rules file
        run: |
          build/checker/rules-check \
              validate \
              --falco-image="falcosecurity/falco-no-driver:${{ matrix.falco-version }}" \
              ${{ matrix.rules-file }}

  rules-check-version:
    needs: rules-get-values
    env:
      # note(jasondellaluce): using the most recent targeted Falco version
      FALCO_VERSION: ${{ fromJson(needs.rules-get-values.outputs.falco-versions)[0] }}
    strategy:
      fail-fast: false
      matrix:
        rules-file: ${{ fromJson(needs.rules-get-values.outputs.changed-files) }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'

      - name: Checkout rules
        uses: actions/checkout@v3

      - name: Get all git tags
        run: git fetch --tags origin

      - name: Get changed files
        uses: jitterbit/get-changed-files@v1
        id: changed
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build checker tool
        working-directory: build/checker
        run: go build -o rules-check
      
      - name: Test checker tool
        working-directory: build/checker
        run: go test ./... -cover

      - name: Compare changed files with previous versions
        id: compare
        run: |
          ./.github/compare-rule-files.sh \
              ${{ matrix.rules-file }} \
              result.txt \
              build/checker/rules-check \
              "falcosecurity/falco-no-driver:$FALCO_VERSION"
          if [ -s result.txt ]; then
            echo "comment_file=result.txt" >> $GITHUB_OUTPUT
          fi

      - uses: mshick/add-pr-comment@v2
        if: steps.compare.outputs.comment_file != ''
        with:
          message-path: |
            ${{ steps.compare.outputs.comment_file }}
